/**
 *  This js file need to include on the main.java.com.msg.swagger index.html for the following purpose:
 *
 * 1) Append an html element for selecting API environment, since DOM are dynamic
 * 2) Change environment SIT, UAT, PROD
 * 3) remove some ui generated by swagger Ui
 * 4) Add changeable session tokens
 */


$(document).ready(function ()
{
    main.initialize();
});


function getQueryString(field, url) {
    var href = url ? url : window.location.href;
    var reg = new RegExp('[?&]' + field + '=([^&#]*)', 'i');
    var string = reg.exec(href);
    return string ? string[1] : null;
}

var util = {
    selectedLocation : 'selectedLocation',
    auSession : 'auSession',
    nzSession : 'nzSession',

    getLocalStorageItem : function (key) {
        var localStorage = window.localStorage;
        return localStorage.getItem(key)
    },

    setLocalStorageItem : function (key, value) {
        var localStorage = window.localStorage;
        localStorage.setItem(key, value);
    }
}


    var main = {
    env: '.env',          // this class is also modified on css
    mainElement: '.main',
    queryParams : util.getLocalStorageItem("query") == null ? '?env=SIT' :   util.getLocalStorageItem("query") ,
    swaggerPath: window.location.host + '/swagger/msg-swagger/spec/getSwagger?env=SIT',
    environments: {SIT: 'SIT', UAT: 'UAT', PROD: 'PROD'},
    currentEnvironment: 'SIT',
    endPoints: {SIT:"http://msgsit.rpdata.com/ttsvr/msg?", UAT: 'http://msgstage.rpdata.com/ttsvr/msg?', PROD: 'http://msg.rpdata.com/ttsvr/msg?' },
    ui : {},

    initialize: function () {
        // dynamic changes
       // main.removeOnArrive();
        //main.changeLabels();

        main.overWriteSwaggerUi(function () {
            main.environmentChangeListener();
            main.changeLocationTokenListener();
            main.setTokenUiValues();
            main.setEnvironment();
            main.hideAllCurlSection();
            main.updateTokenListener();
        });
    },


    getSwaggerPath: function (host) {

        var environments = main.environments;

        // set swaggerPath and current environment base on URL queryString
        if (main.currentEnvironment == environments.PROD) {
            main.swaggerPath = host + '/swagger/msg-swagger/spec/getSwagger?env=PROD';
        } else if (main.currentEnvironment == environments.UAT) {
            main.swaggerPath =  host +'/swagger/msg-swagger/spec/getSwagger?env=UAT';
        } else {
            main.swaggerPath =  host + '/swagger/msg-swagger/spec/getSwagger?env=SIT';
        }

        var location = util.getLocalStorageItem(util.selectedLocation);
        var sid = '&sid=' + main.getToken(location);

        return main.swaggerPath + sid;
    },

    environmentChangeListener: function () {
        var env = main.environments;

        $(main.env).on('change', function () {
            var environment = this.value;

            if (environment == env.PROD) {
                main.queryParams  = '?env=PROD';
                util.setLocalStorageItem("env", env.PROD);
            } else if (environment == env.UAT) {
                main.queryParams  = '?env=UAT';
                util.setLocalStorageItem("env", env.UAT);

            } else {
                main.queryParams  = '?env=SIT';
                util.setLocalStorageItem("env", env.SIT);
            }

            util.setLocalStorageItem('query', main.queryParams);

            main.refreshSwaggerByEnv(main.queryParams);
        })
    },

    changeLocationTokenListener: function(){
        $('.location').on('change', function (e) {
            //set current location selected in local storage
            util.setLocalStorageItem(util.selectedLocation, this.value);
            main.refreshSwaggerUi(e);
        });
    },

    updateTokenListener : function(){

        $('.updateTokenButton').click(function (e) {

            var tokens = $('.tokenForm').serializeArray().reduce(function(obj, item) {
                obj[item.name] = item.value;
                return obj;
            }, {});

            // set token to local storage
            util.setLocalStorageItem(util.auSession, tokens.auSession);
            util.setLocalStorageItem(util.nzSession, tokens.nzSession);

            main.refreshSwaggerUi(e);

        });

    },

    refreshSwaggerUi: function(e){

        // prepare query params
        var location =util.getLocalStorageItem(util.selectedLocation);
        var sid = '&sid=' + main.getToken(location);
        var url = '/swagger/msg-swagger/spec/getSwagger' + main.queryParams + sid;
        e.preventDefault();

        main.ui.specActions.updateUrl(url);
        // need to call twice to update UI
        main.ui.specActions.download(url);
        main.ui.specActions.download(url);
        main.initialize();
    },

    refreshSwaggerByEnv : function (query) {
        main.doCall('/swagger/msg-swagger/spec/getSwagger' + query, 'GET', {}, function (response) {
            main.ui.specActions.updateSpec(JSON.stringify(response));
        });

        main.setEnvironment();
    },

    overWriteSwaggerUi: function (callback) {
        if ($('.info').is(':visible')) {

            main.appendMsgElements();

            if ($(main.mainElement).find(main.env).length != 1)
                setTimeout(main.overWriteSwaggerUi, 100, callback);
            else
                callback();

        } else {
            setTimeout(main.overWriteSwaggerUi, 100, callback);
        }

    },

    appendMsgElements : function () {
        $(main.mainElement).append("<select class=env>" +
            "<option value='SIT'>SIT</option>" +
            "<option value='UAT'>UAT</option>" +
            "<option value='PROD'>Production</option>" +
            "</select>");

        $(main.mainElement).append("<form  class='tokenForm' name='auSession'>" +
            "<input type='text' class='tokenInput' name='auSession' placeholder='AU session token'>" +
            "<input type='text' class='tokenInput' name='nzSession' placeholder='NZ session token'>" +
            "<input type='button' class='updateTokenButton btn' value='Update'>" +
            " </form>");


        $(main.mainElement).append("<select class=location>" +
            "<option value='default' selected='selected' disabled='disabled'>Select token</option>"  +
            "<option value='AU'>AU</option>" +
            "<option value='NZ'>NZ</option>" +
            "</select>");
    },

    setTokenUiValues : function(){
        var auSession =  util.getLocalStorageItem('auSession');
        var nzSession =  util.getLocalStorageItem('nzSession');
        $(".tokenInput[name='auSession']").val(auSession);
        $(".tokenInput[name='nzSession']").val(nzSession);


       var location =  util.getLocalStorageItem(util.selectedLocation) ? util.getLocalStorageItem(util.selectedLocation) : 'default';
        $('.location').val(location);
    },

    setEnvironment: function () {
        main.currentEnvironment = !localStorage.getItem("env") ? 'SIT' : localStorage.getItem("env");

        $(main.env).val(main.currentEnvironment); // set UI environment

        var endPoint = main.endPoints[main.currentEnvironment];
        $(".swagger-ui .info .base-url").text(endPoint);
    },

    hideAllCurlSection: function () {
        $(document).arrive(".copy-paste", function() {
            $('.copy-paste').parent().closest('div').hide();
        });

    },
    changeLabels: function () {

        $(document).arrive(".opblock-title", function() {
            $(".opblock-title").text('Request');
            $(".tablinks[data-name='model']").text('Parameters');
        });

    },

    removeOnArrive: function () {
    $('#swagger-ui').arrive(".opblock-summary-path", function() {
        $('.opblock-summary-path').each(function () {
            if ($(this).text().search('_bsg') > -1) {
                $('.opblock-summary-path').text("");
            }
        });
    });

    //remove default response
    $('#swagger-ui').arrive(".responses-inner table", function() {
        $('table').has('.response-col_status:contains(default)').remove();
        $('div').next('h4:contains(Responses)').hide();
      });
    },

    getToken: function (location) {
        if (location == 'AU'){
            return util.getLocalStorageItem(util.auSession);
        }

        return util.getLocalStorageItem(util.nzSession);
    },
    
    doCall: function (url, method, data, callback) {
        $.ajax({
            url: url,
            type: method,
            data: data,
            dataType: 'json',
            success: function(res) {
                callback(res);
            }
        });
    }

};



